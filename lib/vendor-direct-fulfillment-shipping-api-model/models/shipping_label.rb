=begin
#Selling Partner API for Direct Fulfillment Shipping

#The Selling Partner API for Direct Fulfillment Shipping provides programmatic access to a direct fulfillment vendor's shipping data.

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.26

=end

require 'date'

module AmzSpApi::VendorDirectFulfillmentShippingApiModel
  class ShippingLabel
    # This field will contain the Purchase Order Number for this order.
    attr_accessor :purchase_order_number

    # ID of the selling party or vendor.
    attr_accessor :selling_party

    # Warehouse code of vendor.
    attr_accessor :ship_from_party

    # Format of the label.
    attr_accessor :label_format

    # Provides the details of the packages in this shipment.
    attr_accessor :label_data

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'purchase_order_number' => :'purchaseOrderNumber',
        :'selling_party' => :'sellingParty',
        :'ship_from_party' => :'shipFromParty',
        :'label_format' => :'labelFormat',
        :'label_data' => :'labelData'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'purchase_order_number' => :'String',
        :'selling_party' => :'PartyIdentification',
        :'ship_from_party' => :'PartyIdentification',
        :'label_format' => :'String',
        :'label_data' => :'Array<LabelData>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'purchaseOrderNumber')
        self.purchase_order_number = attributes[:'purchaseOrderNumber']
      end

      if attributes.has_key?(:'sellingParty')
        self.selling_party = attributes[:'sellingParty']
      end

      if attributes.has_key?(:'shipFromParty')
        self.ship_from_party = attributes[:'shipFromParty']
      end

      if attributes.has_key?(:'labelFormat')
        self.label_format = attributes[:'labelFormat']
      end

      if attributes.has_key?(:'labelData')
        if (value = attributes[:'labelData']).is_a?(Array)
          self.label_data = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @purchase_order_number.nil?
        invalid_properties.push('invalid value for "purchase_order_number", purchase_order_number cannot be nil.')
      end

      if @purchase_order_number !~ Regexp.new(/^[a-zA-Z0-9]+$/)
        invalid_properties.push('invalid value for "purchase_order_number", must conform to the pattern /^[a-zA-Z0-9]+$/.')
      end

      if @selling_party.nil?
        invalid_properties.push('invalid value for "selling_party", selling_party cannot be nil.')
      end

      if @ship_from_party.nil?
        invalid_properties.push('invalid value for "ship_from_party", ship_from_party cannot be nil.')
      end

      if @label_format.nil?
        invalid_properties.push('invalid value for "label_format", label_format cannot be nil.')
      end

      if @label_data.nil?
        invalid_properties.push('invalid value for "label_data", label_data cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @purchase_order_number.nil?
      return false if @purchase_order_number !~ Regexp.new(/^[a-zA-Z0-9]+$/)
      return false if @selling_party.nil?
      return false if @ship_from_party.nil?
      return false if @label_format.nil?
      label_format_validator = EnumAttributeValidator.new('String', ['PNG', 'ZPL'])
      return false unless label_format_validator.valid?(@label_format)
      return false if @label_data.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] purchase_order_number Value to be assigned
    def purchase_order_number=(purchase_order_number)
      if purchase_order_number.nil?
        fail ArgumentError, 'purchase_order_number cannot be nil'
      end

      if purchase_order_number !~ Regexp.new(/^[a-zA-Z0-9]+$/)
        fail ArgumentError, 'invalid value for "purchase_order_number", must conform to the pattern /^[a-zA-Z0-9]+$/.'
      end

      @purchase_order_number = purchase_order_number
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] label_format Object to be assigned
    def label_format=(label_format)
      validator = EnumAttributeValidator.new('String', ['PNG', 'ZPL'])
      unless validator.valid?(label_format)
        fail ArgumentError, 'invalid value for "label_format", must be one of #{validator.allowable_values}.'
      end
      @label_format = label_format
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          purchase_order_number == o.purchase_order_number &&
          selling_party == o.selling_party &&
          ship_from_party == o.ship_from_party &&
          label_format == o.label_format &&
          label_data == o.label_data
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [purchase_order_number, selling_party, ship_from_party, label_format, label_data].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = AmzSpApi::VendorDirectFulfillmentShippingApiModel.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
