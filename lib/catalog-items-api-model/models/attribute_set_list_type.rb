=begin
#Selling Partner API for Catalog Items

#The Selling Partner API for Catalog Items helps you programmatically retrieve item details for items in the catalog.

OpenAPI spec version: v0

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require 'date'

module AmzSpApi::CatalogItemsApiModel
  # The attributes of the item.
  class AttributeSetListType
    # The actor attributes of the item.
    attr_accessor :actor

    # The artist attributes of the item.
    attr_accessor :artist

    # The aspect ratio attribute of the item.
    attr_accessor :aspect_ratio

    # The audience rating attribute of the item.
    attr_accessor :audience_rating

    # The author attributes of the item.
    attr_accessor :author

    # The back finding attribute of the item.
    attr_accessor :back_finding

    # The band material type attribute of the item.
    attr_accessor :band_material_type

    # The binding attribute of the item.
    attr_accessor :binding

    # The Bluray region attribute of the item.
    attr_accessor :bluray_region

    # The brand attribute of the item.
    attr_accessor :brand

    # The CERO age rating attribute of the item.
    attr_accessor :cero_age_rating

    # The chain type attribute of the item.
    attr_accessor :chain_type

    # The clasp type attribute of the item.
    attr_accessor :clasp_type

    # The color attribute of the item.
    attr_accessor :color

    # The CPU manufacturer attribute of the item.
    attr_accessor :cpu_manufacturer

    # The CPU speed attribute of the item.
    attr_accessor :cpu_speed

    # The CPU type attribute of the item.
    attr_accessor :cpu_type

    # The creator attributes of the item.
    attr_accessor :creator

    # The department attribute of the item.
    attr_accessor :department

    # The director attributes of the item.
    attr_accessor :director

    # The display size attribute of the item.
    attr_accessor :display_size

    # The edition attribute of the item.
    attr_accessor :edition

    # The episode sequence attribute of the item.
    attr_accessor :episode_sequence

    # The ESRB age rating attribute of the item.
    attr_accessor :esrb_age_rating

    # The feature attributes of the item
    attr_accessor :feature

    # The flavor attribute of the item.
    attr_accessor :flavor

    # The format attributes of the item.
    attr_accessor :format

    # The gem type attributes of the item.
    attr_accessor :gem_type

    # The genre attribute of the item.
    attr_accessor :genre

    # The golf club flex attribute of the item.
    attr_accessor :golf_club_flex

    # The golf club loft attribute of the item.
    attr_accessor :golf_club_loft

    # The hand orientation attribute of the item.
    attr_accessor :hand_orientation

    # The hard disk interface attribute of the item.
    attr_accessor :hard_disk_interface

    # The hard disk size attribute of the item.
    attr_accessor :hard_disk_size

    # The hardware platform attribute of the item.
    attr_accessor :hardware_platform

    # The hazardous material type attribute of the item.
    attr_accessor :hazardous_material_type

    # The item dimensions attribute of the item.
    attr_accessor :item_dimensions

    # The adult product attribute of the item.
    attr_accessor :is_adult_product

    # The autographed attribute of the item.
    attr_accessor :is_autographed

    # The is eligible for trade in attribute of the item.
    attr_accessor :is_eligible_for_trade_in

    # The is memorabilia attribute of the item.
    attr_accessor :is_memorabilia

    # The issues per year attribute of the item.
    attr_accessor :issues_per_year

    # The item part number attribute of the item.
    attr_accessor :item_part_number

    # The label attribute of the item.
    attr_accessor :label

    # The languages attribute of the item.
    attr_accessor :languages

    # The legal disclaimer attribute of the item.
    attr_accessor :legal_disclaimer

    # The list price attribute of the item.
    attr_accessor :list_price

    # The manufacturer attribute of the item.
    attr_accessor :manufacturer

    # The manufacturer maximum age attribute of the item.
    attr_accessor :manufacturer_maximum_age

    # The manufacturer minimum age attribute of the item.
    attr_accessor :manufacturer_minimum_age

    # The manufacturer parts warranty description attribute of the item.
    attr_accessor :manufacturer_parts_warranty_description

    # The material type attributes of the item.
    attr_accessor :material_type

    # The maximum resolution attribute of the item.
    attr_accessor :maximum_resolution

    # The media type attributes of the item.
    attr_accessor :media_type

    # The metal stamp attribute of the item.
    attr_accessor :metal_stamp

    # The metal type attribute of the item.
    attr_accessor :metal_type

    # The model attribute of the item.
    attr_accessor :model

    # The number of discs attribute of the item.
    attr_accessor :number_of_discs

    # The number of issues attribute of the item.
    attr_accessor :number_of_issues

    # The number of items attribute of the item.
    attr_accessor :number_of_items

    # The number of pages attribute of the item.
    attr_accessor :number_of_pages

    # The number of tracks attribute of the item.
    attr_accessor :number_of_tracks

    # The operating system attributes of the item.
    attr_accessor :operating_system

    # The optical zoom attribute of the item.
    attr_accessor :optical_zoom

    # The package dimensions attribute of the item.
    attr_accessor :package_dimensions

    # The package quantity attribute of the item.
    attr_accessor :package_quantity

    # The part number attribute of the item.
    attr_accessor :part_number

    # The PEGI rating attribute of the item.
    attr_accessor :pegi_rating

    # The platform attributes of the item.
    attr_accessor :platform

    # The processor count attribute of the item.
    attr_accessor :processor_count

    # The product group attribute of the item.
    attr_accessor :product_group

    # The product type name attribute of the item.
    attr_accessor :product_type_name

    # The product type subcategory attribute of the item.
    attr_accessor :product_type_subcategory

    # The publication date attribute of the item.
    attr_accessor :publication_date

    # The publisher attribute of the item.
    attr_accessor :publisher

    # The region code attribute of the item.
    attr_accessor :region_code

    # The release date attribute of the item.
    attr_accessor :release_date

    # The ring size attribute of the item.
    attr_accessor :ring_size

    # The running time attribute of the item.
    attr_accessor :running_time

    # The shaft material attribute of the item.
    attr_accessor :shaft_material

    # The scent attribute of the item.
    attr_accessor :scent

    # The season sequence attribute of the item.
    attr_accessor :season_sequence

    # The Seikodo product code attribute of the item.
    attr_accessor :seikodo_product_code

    # The size attribute of the item.
    attr_accessor :size

    # The size per pearl attribute of the item.
    attr_accessor :size_per_pearl

    # The small image attribute of the item.
    attr_accessor :small_image

    # The studio attribute of the item.
    attr_accessor :studio

    # The subscription length attribute of the item.
    attr_accessor :subscription_length

    # The system memory size attribute of the item.
    attr_accessor :system_memory_size

    # The system memory type attribute of the item.
    attr_accessor :system_memory_type

    # The theatrical release date attribute of the item.
    attr_accessor :theatrical_release_date

    # The title attribute of the item.
    attr_accessor :title

    # The total diamond weight attribute of the item.
    attr_accessor :total_diamond_weight

    # The total gem weight attribute of the item.
    attr_accessor :total_gem_weight

    # The warranty attribute of the item.
    attr_accessor :warranty

    # The WEEE tax value attribute of the item.
    attr_accessor :weee_tax_value


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'actor' => :'Actor',
        :'artist' => :'Artist',
        :'aspect_ratio' => :'AspectRatio',
        :'audience_rating' => :'AudienceRating',
        :'author' => :'Author',
        :'back_finding' => :'BackFinding',
        :'band_material_type' => :'BandMaterialType',
        :'binding' => :'Binding',
        :'bluray_region' => :'BlurayRegion',
        :'brand' => :'Brand',
        :'cero_age_rating' => :'CeroAgeRating',
        :'chain_type' => :'ChainType',
        :'clasp_type' => :'ClaspType',
        :'color' => :'Color',
        :'cpu_manufacturer' => :'CpuManufacturer',
        :'cpu_speed' => :'CpuSpeed',
        :'cpu_type' => :'CpuType',
        :'creator' => :'Creator',
        :'department' => :'Department',
        :'director' => :'Director',
        :'display_size' => :'DisplaySize',
        :'edition' => :'Edition',
        :'episode_sequence' => :'EpisodeSequence',
        :'esrb_age_rating' => :'EsrbAgeRating',
        :'feature' => :'Feature',
        :'flavor' => :'Flavor',
        :'format' => :'Format',
        :'gem_type' => :'GemType',
        :'genre' => :'Genre',
        :'golf_club_flex' => :'GolfClubFlex',
        :'golf_club_loft' => :'GolfClubLoft',
        :'hand_orientation' => :'HandOrientation',
        :'hard_disk_interface' => :'HardDiskInterface',
        :'hard_disk_size' => :'HardDiskSize',
        :'hardware_platform' => :'HardwarePlatform',
        :'hazardous_material_type' => :'HazardousMaterialType',
        :'item_dimensions' => :'ItemDimensions',
        :'is_adult_product' => :'IsAdultProduct',
        :'is_autographed' => :'IsAutographed',
        :'is_eligible_for_trade_in' => :'IsEligibleForTradeIn',
        :'is_memorabilia' => :'IsMemorabilia',
        :'issues_per_year' => :'IssuesPerYear',
        :'item_part_number' => :'ItemPartNumber',
        :'label' => :'Label',
        :'languages' => :'Languages',
        :'legal_disclaimer' => :'LegalDisclaimer',
        :'list_price' => :'ListPrice',
        :'manufacturer' => :'Manufacturer',
        :'manufacturer_maximum_age' => :'ManufacturerMaximumAge',
        :'manufacturer_minimum_age' => :'ManufacturerMinimumAge',
        :'manufacturer_parts_warranty_description' => :'ManufacturerPartsWarrantyDescription',
        :'material_type' => :'MaterialType',
        :'maximum_resolution' => :'MaximumResolution',
        :'media_type' => :'MediaType',
        :'metal_stamp' => :'MetalStamp',
        :'metal_type' => :'MetalType',
        :'model' => :'Model',
        :'number_of_discs' => :'NumberOfDiscs',
        :'number_of_issues' => :'NumberOfIssues',
        :'number_of_items' => :'NumberOfItems',
        :'number_of_pages' => :'NumberOfPages',
        :'number_of_tracks' => :'NumberOfTracks',
        :'operating_system' => :'OperatingSystem',
        :'optical_zoom' => :'OpticalZoom',
        :'package_dimensions' => :'PackageDimensions',
        :'package_quantity' => :'PackageQuantity',
        :'part_number' => :'PartNumber',
        :'pegi_rating' => :'PegiRating',
        :'platform' => :'Platform',
        :'processor_count' => :'ProcessorCount',
        :'product_group' => :'ProductGroup',
        :'product_type_name' => :'ProductTypeName',
        :'product_type_subcategory' => :'ProductTypeSubcategory',
        :'publication_date' => :'PublicationDate',
        :'publisher' => :'Publisher',
        :'region_code' => :'RegionCode',
        :'release_date' => :'ReleaseDate',
        :'ring_size' => :'RingSize',
        :'running_time' => :'RunningTime',
        :'shaft_material' => :'ShaftMaterial',
        :'scent' => :'Scent',
        :'season_sequence' => :'SeasonSequence',
        :'seikodo_product_code' => :'SeikodoProductCode',
        :'size' => :'Size',
        :'size_per_pearl' => :'SizePerPearl',
        :'small_image' => :'SmallImage',
        :'studio' => :'Studio',
        :'subscription_length' => :'SubscriptionLength',
        :'system_memory_size' => :'SystemMemorySize',
        :'system_memory_type' => :'SystemMemoryType',
        :'theatrical_release_date' => :'TheatricalReleaseDate',
        :'title' => :'Title',
        :'total_diamond_weight' => :'TotalDiamondWeight',
        :'total_gem_weight' => :'TotalGemWeight',
        :'warranty' => :'Warranty',
        :'weee_tax_value' => :'WeeeTaxValue'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'actor' => :'Array<String>',
        :'artist' => :'Array<String>',
        :'aspect_ratio' => :'String',
        :'audience_rating' => :'String',
        :'author' => :'Array<String>',
        :'back_finding' => :'String',
        :'band_material_type' => :'String',
        :'binding' => :'String',
        :'bluray_region' => :'String',
        :'brand' => :'String',
        :'cero_age_rating' => :'String',
        :'chain_type' => :'String',
        :'clasp_type' => :'String',
        :'color' => :'String',
        :'cpu_manufacturer' => :'String',
        :'cpu_speed' => :'DecimalWithUnits',
        :'cpu_type' => :'String',
        :'creator' => :'Array<CreatorType>',
        :'department' => :'String',
        :'director' => :'Array<String>',
        :'display_size' => :'DecimalWithUnits',
        :'edition' => :'String',
        :'episode_sequence' => :'String',
        :'esrb_age_rating' => :'String',
        :'feature' => :'Array<String>',
        :'flavor' => :'String',
        :'format' => :'Array<String>',
        :'gem_type' => :'Array<String>',
        :'genre' => :'String',
        :'golf_club_flex' => :'String',
        :'golf_club_loft' => :'DecimalWithUnits',
        :'hand_orientation' => :'String',
        :'hard_disk_interface' => :'String',
        :'hard_disk_size' => :'DecimalWithUnits',
        :'hardware_platform' => :'String',
        :'hazardous_material_type' => :'String',
        :'item_dimensions' => :'DimensionType',
        :'is_adult_product' => :'BOOLEAN',
        :'is_autographed' => :'BOOLEAN',
        :'is_eligible_for_trade_in' => :'BOOLEAN',
        :'is_memorabilia' => :'BOOLEAN',
        :'issues_per_year' => :'String',
        :'item_part_number' => :'String',
        :'label' => :'String',
        :'languages' => :'Array<LanguageType>',
        :'legal_disclaimer' => :'String',
        :'list_price' => :'Price',
        :'manufacturer' => :'String',
        :'manufacturer_maximum_age' => :'DecimalWithUnits',
        :'manufacturer_minimum_age' => :'DecimalWithUnits',
        :'manufacturer_parts_warranty_description' => :'String',
        :'material_type' => :'Array<String>',
        :'maximum_resolution' => :'DecimalWithUnits',
        :'media_type' => :'Array<String>',
        :'metal_stamp' => :'String',
        :'metal_type' => :'String',
        :'model' => :'String',
        :'number_of_discs' => :'Integer',
        :'number_of_issues' => :'Integer',
        :'number_of_items' => :'Integer',
        :'number_of_pages' => :'Integer',
        :'number_of_tracks' => :'Integer',
        :'operating_system' => :'Array<String>',
        :'optical_zoom' => :'DecimalWithUnits',
        :'package_dimensions' => :'DimensionType',
        :'package_quantity' => :'Integer',
        :'part_number' => :'String',
        :'pegi_rating' => :'String',
        :'platform' => :'Array<String>',
        :'processor_count' => :'Integer',
        :'product_group' => :'String',
        :'product_type_name' => :'String',
        :'product_type_subcategory' => :'String',
        :'publication_date' => :'String',
        :'publisher' => :'String',
        :'region_code' => :'String',
        :'release_date' => :'String',
        :'ring_size' => :'String',
        :'running_time' => :'DecimalWithUnits',
        :'shaft_material' => :'String',
        :'scent' => :'String',
        :'season_sequence' => :'String',
        :'seikodo_product_code' => :'String',
        :'size' => :'String',
        :'size_per_pearl' => :'String',
        :'small_image' => :'Image',
        :'studio' => :'String',
        :'subscription_length' => :'DecimalWithUnits',
        :'system_memory_size' => :'DecimalWithUnits',
        :'system_memory_type' => :'String',
        :'theatrical_release_date' => :'String',
        :'title' => :'String',
        :'total_diamond_weight' => :'DecimalWithUnits',
        :'total_gem_weight' => :'DecimalWithUnits',
        :'warranty' => :'String',
        :'weee_tax_value' => :'Price'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'Actor')
        if (value = attributes[:'Actor']).is_a?(Array)
          self.actor = value
        end
      end

      if attributes.has_key?(:'Artist')
        if (value = attributes[:'Artist']).is_a?(Array)
          self.artist = value
        end
      end

      if attributes.has_key?(:'AspectRatio')
        self.aspect_ratio = attributes[:'AspectRatio']
      end

      if attributes.has_key?(:'AudienceRating')
        self.audience_rating = attributes[:'AudienceRating']
      end

      if attributes.has_key?(:'Author')
        if (value = attributes[:'Author']).is_a?(Array)
          self.author = value
        end
      end

      if attributes.has_key?(:'BackFinding')
        self.back_finding = attributes[:'BackFinding']
      end

      if attributes.has_key?(:'BandMaterialType')
        self.band_material_type = attributes[:'BandMaterialType']
      end

      if attributes.has_key?(:'Binding')
        self.binding = attributes[:'Binding']
      end

      if attributes.has_key?(:'BlurayRegion')
        self.bluray_region = attributes[:'BlurayRegion']
      end

      if attributes.has_key?(:'Brand')
        self.brand = attributes[:'Brand']
      end

      if attributes.has_key?(:'CeroAgeRating')
        self.cero_age_rating = attributes[:'CeroAgeRating']
      end

      if attributes.has_key?(:'ChainType')
        self.chain_type = attributes[:'ChainType']
      end

      if attributes.has_key?(:'ClaspType')
        self.clasp_type = attributes[:'ClaspType']
      end

      if attributes.has_key?(:'Color')
        self.color = attributes[:'Color']
      end

      if attributes.has_key?(:'CpuManufacturer')
        self.cpu_manufacturer = attributes[:'CpuManufacturer']
      end

      if attributes.has_key?(:'CpuSpeed')
        self.cpu_speed = attributes[:'CpuSpeed']
      end

      if attributes.has_key?(:'CpuType')
        self.cpu_type = attributes[:'CpuType']
      end

      if attributes.has_key?(:'Creator')
        if (value = attributes[:'Creator']).is_a?(Array)
          self.creator = value
        end
      end

      if attributes.has_key?(:'Department')
        self.department = attributes[:'Department']
      end

      if attributes.has_key?(:'Director')
        if (value = attributes[:'Director']).is_a?(Array)
          self.director = value
        end
      end

      if attributes.has_key?(:'DisplaySize')
        self.display_size = attributes[:'DisplaySize']
      end

      if attributes.has_key?(:'Edition')
        self.edition = attributes[:'Edition']
      end

      if attributes.has_key?(:'EpisodeSequence')
        self.episode_sequence = attributes[:'EpisodeSequence']
      end

      if attributes.has_key?(:'EsrbAgeRating')
        self.esrb_age_rating = attributes[:'EsrbAgeRating']
      end

      if attributes.has_key?(:'Feature')
        if (value = attributes[:'Feature']).is_a?(Array)
          self.feature = value
        end
      end

      if attributes.has_key?(:'Flavor')
        self.flavor = attributes[:'Flavor']
      end

      if attributes.has_key?(:'Format')
        if (value = attributes[:'Format']).is_a?(Array)
          self.format = value
        end
      end

      if attributes.has_key?(:'GemType')
        if (value = attributes[:'GemType']).is_a?(Array)
          self.gem_type = value
        end
      end

      if attributes.has_key?(:'Genre')
        self.genre = attributes[:'Genre']
      end

      if attributes.has_key?(:'GolfClubFlex')
        self.golf_club_flex = attributes[:'GolfClubFlex']
      end

      if attributes.has_key?(:'GolfClubLoft')
        self.golf_club_loft = attributes[:'GolfClubLoft']
      end

      if attributes.has_key?(:'HandOrientation')
        self.hand_orientation = attributes[:'HandOrientation']
      end

      if attributes.has_key?(:'HardDiskInterface')
        self.hard_disk_interface = attributes[:'HardDiskInterface']
      end

      if attributes.has_key?(:'HardDiskSize')
        self.hard_disk_size = attributes[:'HardDiskSize']
      end

      if attributes.has_key?(:'HardwarePlatform')
        self.hardware_platform = attributes[:'HardwarePlatform']
      end

      if attributes.has_key?(:'HazardousMaterialType')
        self.hazardous_material_type = attributes[:'HazardousMaterialType']
      end

      if attributes.has_key?(:'ItemDimensions')
        self.item_dimensions = attributes[:'ItemDimensions']
      end

      if attributes.has_key?(:'IsAdultProduct')
        self.is_adult_product = attributes[:'IsAdultProduct']
      end

      if attributes.has_key?(:'IsAutographed')
        self.is_autographed = attributes[:'IsAutographed']
      end

      if attributes.has_key?(:'IsEligibleForTradeIn')
        self.is_eligible_for_trade_in = attributes[:'IsEligibleForTradeIn']
      end

      if attributes.has_key?(:'IsMemorabilia')
        self.is_memorabilia = attributes[:'IsMemorabilia']
      end

      if attributes.has_key?(:'IssuesPerYear')
        self.issues_per_year = attributes[:'IssuesPerYear']
      end

      if attributes.has_key?(:'ItemPartNumber')
        self.item_part_number = attributes[:'ItemPartNumber']
      end

      if attributes.has_key?(:'Label')
        self.label = attributes[:'Label']
      end

      if attributes.has_key?(:'Languages')
        if (value = attributes[:'Languages']).is_a?(Array)
          self.languages = value
        end
      end

      if attributes.has_key?(:'LegalDisclaimer')
        self.legal_disclaimer = attributes[:'LegalDisclaimer']
      end

      if attributes.has_key?(:'ListPrice')
        self.list_price = attributes[:'ListPrice']
      end

      if attributes.has_key?(:'Manufacturer')
        self.manufacturer = attributes[:'Manufacturer']
      end

      if attributes.has_key?(:'ManufacturerMaximumAge')
        self.manufacturer_maximum_age = attributes[:'ManufacturerMaximumAge']
      end

      if attributes.has_key?(:'ManufacturerMinimumAge')
        self.manufacturer_minimum_age = attributes[:'ManufacturerMinimumAge']
      end

      if attributes.has_key?(:'ManufacturerPartsWarrantyDescription')
        self.manufacturer_parts_warranty_description = attributes[:'ManufacturerPartsWarrantyDescription']
      end

      if attributes.has_key?(:'MaterialType')
        if (value = attributes[:'MaterialType']).is_a?(Array)
          self.material_type = value
        end
      end

      if attributes.has_key?(:'MaximumResolution')
        self.maximum_resolution = attributes[:'MaximumResolution']
      end

      if attributes.has_key?(:'MediaType')
        if (value = attributes[:'MediaType']).is_a?(Array)
          self.media_type = value
        end
      end

      if attributes.has_key?(:'MetalStamp')
        self.metal_stamp = attributes[:'MetalStamp']
      end

      if attributes.has_key?(:'MetalType')
        self.metal_type = attributes[:'MetalType']
      end

      if attributes.has_key?(:'Model')
        self.model = attributes[:'Model']
      end

      if attributes.has_key?(:'NumberOfDiscs')
        self.number_of_discs = attributes[:'NumberOfDiscs']
      end

      if attributes.has_key?(:'NumberOfIssues')
        self.number_of_issues = attributes[:'NumberOfIssues']
      end

      if attributes.has_key?(:'NumberOfItems')
        self.number_of_items = attributes[:'NumberOfItems']
      end

      if attributes.has_key?(:'NumberOfPages')
        self.number_of_pages = attributes[:'NumberOfPages']
      end

      if attributes.has_key?(:'NumberOfTracks')
        self.number_of_tracks = attributes[:'NumberOfTracks']
      end

      if attributes.has_key?(:'OperatingSystem')
        if (value = attributes[:'OperatingSystem']).is_a?(Array)
          self.operating_system = value
        end
      end

      if attributes.has_key?(:'OpticalZoom')
        self.optical_zoom = attributes[:'OpticalZoom']
      end

      if attributes.has_key?(:'PackageDimensions')
        self.package_dimensions = attributes[:'PackageDimensions']
      end

      if attributes.has_key?(:'PackageQuantity')
        self.package_quantity = attributes[:'PackageQuantity']
      end

      if attributes.has_key?(:'PartNumber')
        self.part_number = attributes[:'PartNumber']
      end

      if attributes.has_key?(:'PegiRating')
        self.pegi_rating = attributes[:'PegiRating']
      end

      if attributes.has_key?(:'Platform')
        if (value = attributes[:'Platform']).is_a?(Array)
          self.platform = value
        end
      end

      if attributes.has_key?(:'ProcessorCount')
        self.processor_count = attributes[:'ProcessorCount']
      end

      if attributes.has_key?(:'ProductGroup')
        self.product_group = attributes[:'ProductGroup']
      end

      if attributes.has_key?(:'ProductTypeName')
        self.product_type_name = attributes[:'ProductTypeName']
      end

      if attributes.has_key?(:'ProductTypeSubcategory')
        self.product_type_subcategory = attributes[:'ProductTypeSubcategory']
      end

      if attributes.has_key?(:'PublicationDate')
        self.publication_date = attributes[:'PublicationDate']
      end

      if attributes.has_key?(:'Publisher')
        self.publisher = attributes[:'Publisher']
      end

      if attributes.has_key?(:'RegionCode')
        self.region_code = attributes[:'RegionCode']
      end

      if attributes.has_key?(:'ReleaseDate')
        self.release_date = attributes[:'ReleaseDate']
      end

      if attributes.has_key?(:'RingSize')
        self.ring_size = attributes[:'RingSize']
      end

      if attributes.has_key?(:'RunningTime')
        self.running_time = attributes[:'RunningTime']
      end

      if attributes.has_key?(:'ShaftMaterial')
        self.shaft_material = attributes[:'ShaftMaterial']
      end

      if attributes.has_key?(:'Scent')
        self.scent = attributes[:'Scent']
      end

      if attributes.has_key?(:'SeasonSequence')
        self.season_sequence = attributes[:'SeasonSequence']
      end

      if attributes.has_key?(:'SeikodoProductCode')
        self.seikodo_product_code = attributes[:'SeikodoProductCode']
      end

      if attributes.has_key?(:'Size')
        self.size = attributes[:'Size']
      end

      if attributes.has_key?(:'SizePerPearl')
        self.size_per_pearl = attributes[:'SizePerPearl']
      end

      if attributes.has_key?(:'SmallImage')
        self.small_image = attributes[:'SmallImage']
      end

      if attributes.has_key?(:'Studio')
        self.studio = attributes[:'Studio']
      end

      if attributes.has_key?(:'SubscriptionLength')
        self.subscription_length = attributes[:'SubscriptionLength']
      end

      if attributes.has_key?(:'SystemMemorySize')
        self.system_memory_size = attributes[:'SystemMemorySize']
      end

      if attributes.has_key?(:'SystemMemoryType')
        self.system_memory_type = attributes[:'SystemMemoryType']
      end

      if attributes.has_key?(:'TheatricalReleaseDate')
        self.theatrical_release_date = attributes[:'TheatricalReleaseDate']
      end

      if attributes.has_key?(:'Title')
        self.title = attributes[:'Title']
      end

      if attributes.has_key?(:'TotalDiamondWeight')
        self.total_diamond_weight = attributes[:'TotalDiamondWeight']
      end

      if attributes.has_key?(:'TotalGemWeight')
        self.total_gem_weight = attributes[:'TotalGemWeight']
      end

      if attributes.has_key?(:'Warranty')
        self.warranty = attributes[:'Warranty']
      end

      if attributes.has_key?(:'WeeeTaxValue')
        self.weee_tax_value = attributes[:'WeeeTaxValue']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          actor == o.actor &&
          artist == o.artist &&
          aspect_ratio == o.aspect_ratio &&
          audience_rating == o.audience_rating &&
          author == o.author &&
          back_finding == o.back_finding &&
          band_material_type == o.band_material_type &&
          binding == o.binding &&
          bluray_region == o.bluray_region &&
          brand == o.brand &&
          cero_age_rating == o.cero_age_rating &&
          chain_type == o.chain_type &&
          clasp_type == o.clasp_type &&
          color == o.color &&
          cpu_manufacturer == o.cpu_manufacturer &&
          cpu_speed == o.cpu_speed &&
          cpu_type == o.cpu_type &&
          creator == o.creator &&
          department == o.department &&
          director == o.director &&
          display_size == o.display_size &&
          edition == o.edition &&
          episode_sequence == o.episode_sequence &&
          esrb_age_rating == o.esrb_age_rating &&
          feature == o.feature &&
          flavor == o.flavor &&
          format == o.format &&
          gem_type == o.gem_type &&
          genre == o.genre &&
          golf_club_flex == o.golf_club_flex &&
          golf_club_loft == o.golf_club_loft &&
          hand_orientation == o.hand_orientation &&
          hard_disk_interface == o.hard_disk_interface &&
          hard_disk_size == o.hard_disk_size &&
          hardware_platform == o.hardware_platform &&
          hazardous_material_type == o.hazardous_material_type &&
          item_dimensions == o.item_dimensions &&
          is_adult_product == o.is_adult_product &&
          is_autographed == o.is_autographed &&
          is_eligible_for_trade_in == o.is_eligible_for_trade_in &&
          is_memorabilia == o.is_memorabilia &&
          issues_per_year == o.issues_per_year &&
          item_part_number == o.item_part_number &&
          label == o.label &&
          languages == o.languages &&
          legal_disclaimer == o.legal_disclaimer &&
          list_price == o.list_price &&
          manufacturer == o.manufacturer &&
          manufacturer_maximum_age == o.manufacturer_maximum_age &&
          manufacturer_minimum_age == o.manufacturer_minimum_age &&
          manufacturer_parts_warranty_description == o.manufacturer_parts_warranty_description &&
          material_type == o.material_type &&
          maximum_resolution == o.maximum_resolution &&
          media_type == o.media_type &&
          metal_stamp == o.metal_stamp &&
          metal_type == o.metal_type &&
          model == o.model &&
          number_of_discs == o.number_of_discs &&
          number_of_issues == o.number_of_issues &&
          number_of_items == o.number_of_items &&
          number_of_pages == o.number_of_pages &&
          number_of_tracks == o.number_of_tracks &&
          operating_system == o.operating_system &&
          optical_zoom == o.optical_zoom &&
          package_dimensions == o.package_dimensions &&
          package_quantity == o.package_quantity &&
          part_number == o.part_number &&
          pegi_rating == o.pegi_rating &&
          platform == o.platform &&
          processor_count == o.processor_count &&
          product_group == o.product_group &&
          product_type_name == o.product_type_name &&
          product_type_subcategory == o.product_type_subcategory &&
          publication_date == o.publication_date &&
          publisher == o.publisher &&
          region_code == o.region_code &&
          release_date == o.release_date &&
          ring_size == o.ring_size &&
          running_time == o.running_time &&
          shaft_material == o.shaft_material &&
          scent == o.scent &&
          season_sequence == o.season_sequence &&
          seikodo_product_code == o.seikodo_product_code &&
          size == o.size &&
          size_per_pearl == o.size_per_pearl &&
          small_image == o.small_image &&
          studio == o.studio &&
          subscription_length == o.subscription_length &&
          system_memory_size == o.system_memory_size &&
          system_memory_type == o.system_memory_type &&
          theatrical_release_date == o.theatrical_release_date &&
          title == o.title &&
          total_diamond_weight == o.total_diamond_weight &&
          total_gem_weight == o.total_gem_weight &&
          warranty == o.warranty &&
          weee_tax_value == o.weee_tax_value
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [actor, artist, aspect_ratio, audience_rating, author, back_finding, band_material_type, binding, bluray_region, brand, cero_age_rating, chain_type, clasp_type, color, cpu_manufacturer, cpu_speed, cpu_type, creator, department, director, display_size, edition, episode_sequence, esrb_age_rating, feature, flavor, format, gem_type, genre, golf_club_flex, golf_club_loft, hand_orientation, hard_disk_interface, hard_disk_size, hardware_platform, hazardous_material_type, item_dimensions, is_adult_product, is_autographed, is_eligible_for_trade_in, is_memorabilia, issues_per_year, item_part_number, label, languages, legal_disclaimer, list_price, manufacturer, manufacturer_maximum_age, manufacturer_minimum_age, manufacturer_parts_warranty_description, material_type, maximum_resolution, media_type, metal_stamp, metal_type, model, number_of_discs, number_of_issues, number_of_items, number_of_pages, number_of_tracks, operating_system, optical_zoom, package_dimensions, package_quantity, part_number, pegi_rating, platform, processor_count, product_group, product_type_name, product_type_subcategory, publication_date, publisher, region_code, release_date, ring_size, running_time, shaft_material, scent, season_sequence, seikodo_product_code, size, size_per_pearl, small_image, studio, subscription_length, system_memory_size, system_memory_type, theatrical_release_date, title, total_diamond_weight, total_gem_weight, warranty, weee_tax_value].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /^(true|t|yes|y|1)$/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = AmzSpApi::CatalogItemsApiModel.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
