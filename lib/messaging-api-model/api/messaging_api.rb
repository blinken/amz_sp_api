=begin
#Selling Partner API for Messaging

#With the Messaging API you can build applications that send messages to buyers. You can get a list of message types that are available for an order that you specify, then call an operation that sends a message to the buyer for that order. The Messaging API returns responses that are formed according to the <a href=https://tools.ietf.org/html/draft-kelly-json-hal-08>JSON Hypertext Application Language</a> (HAL) standard.

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module AmzSpApi::MessagingApiModel
  class MessagingApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # 
    # Sends a message asking a buyer to provide or verify customization details such as name spelling, images, initials, etc.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
    # @param amazon_order_id An Amazon order identifier. This specifies the order for which a message is sent.
    # @param marketplace_ids A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [CreateConfirmCustomizationDetailsResponse]
    def confirm_customization_details(amazon_order_id, marketplace_ids, body, opts = {})
      data, _status_code, _headers = confirm_customization_details_with_http_info(amazon_order_id, marketplace_ids, body, opts)
      return data
    end

    # 
    # Sends a message asking a buyer to provide or verify customization details such as name spelling, images, initials, etc.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
    # @param amazon_order_id An Amazon order identifier. This specifies the order for which a message is sent.
    # @param marketplace_ids A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateConfirmCustomizationDetailsResponse, Fixnum, Hash)>] CreateConfirmCustomizationDetailsResponse data, response status code and response headers
    def confirm_customization_details_with_http_info(amazon_order_id, marketplace_ids, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MessagingApi.confirm_customization_details ..."
      end
      # verify the required parameter 'amazon_order_id' is set
      fail ArgumentError, "Missing the required parameter 'amazon_order_id' when calling MessagingApi.confirm_customization_details" if amazon_order_id.nil?
      # verify the required parameter 'marketplace_ids' is set
      fail ArgumentError, "Missing the required parameter 'marketplace_ids' when calling MessagingApi.confirm_customization_details" if marketplace_ids.nil?
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling MessagingApi.confirm_customization_details" if body.nil?
      # resource path
      local_var_path = "/messaging/v1/orders/{amazonOrderId}/messages/confirmCustomizationDetails".sub('{format}','json').sub('{' + 'amazonOrderId' + '}', amazon_order_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'marketplaceIds'] = @api_client.build_collection_param(marketplace_ids, :csv)

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/hal+json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreateConfirmCustomizationDetailsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagingApi#confirm_customization_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Sends a message to a buyer to provide details about an Amazon Motors order. This message can only be sent by Amazon Motors sellers.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
    # @param amazon_order_id An Amazon order identifier. This specifies the order for which a message is sent.
    # @param marketplace_ids A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [CreateAmazonMotorsResponse]
    def create_amazon_motors(amazon_order_id, marketplace_ids, body, opts = {})
      data, _status_code, _headers = create_amazon_motors_with_http_info(amazon_order_id, marketplace_ids, body, opts)
      return data
    end

    # 
    # Sends a message to a buyer to provide details about an Amazon Motors order. This message can only be sent by Amazon Motors sellers.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
    # @param amazon_order_id An Amazon order identifier. This specifies the order for which a message is sent.
    # @param marketplace_ids A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateAmazonMotorsResponse, Fixnum, Hash)>] CreateAmazonMotorsResponse data, response status code and response headers
    def create_amazon_motors_with_http_info(amazon_order_id, marketplace_ids, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MessagingApi.create_amazon_motors ..."
      end
      # verify the required parameter 'amazon_order_id' is set
      fail ArgumentError, "Missing the required parameter 'amazon_order_id' when calling MessagingApi.create_amazon_motors" if amazon_order_id.nil?
      # verify the required parameter 'marketplace_ids' is set
      fail ArgumentError, "Missing the required parameter 'marketplace_ids' when calling MessagingApi.create_amazon_motors" if marketplace_ids.nil?
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling MessagingApi.create_amazon_motors" if body.nil?
      # resource path
      local_var_path = "/messaging/v1/orders/{amazonOrderId}/messages/amazonMotors".sub('{format}','json').sub('{' + 'amazonOrderId' + '}', amazon_order_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'marketplaceIds'] = @api_client.build_collection_param(marketplace_ids, :csv)

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/hal+json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreateAmazonMotorsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagingApi#create_amazon_motors\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Sends a message to a buyer to arrange a delivery or to confirm contact information for making a delivery.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
    # @param amazon_order_id An Amazon order identifier. This specifies the order for which a message is sent.
    # @param marketplace_ids A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [CreateConfirmDeliveryDetailsResponse]
    def create_confirm_delivery_details(amazon_order_id, marketplace_ids, body, opts = {})
      data, _status_code, _headers = create_confirm_delivery_details_with_http_info(amazon_order_id, marketplace_ids, body, opts)
      return data
    end

    # 
    # Sends a message to a buyer to arrange a delivery or to confirm contact information for making a delivery.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
    # @param amazon_order_id An Amazon order identifier. This specifies the order for which a message is sent.
    # @param marketplace_ids A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateConfirmDeliveryDetailsResponse, Fixnum, Hash)>] CreateConfirmDeliveryDetailsResponse data, response status code and response headers
    def create_confirm_delivery_details_with_http_info(amazon_order_id, marketplace_ids, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MessagingApi.create_confirm_delivery_details ..."
      end
      # verify the required parameter 'amazon_order_id' is set
      fail ArgumentError, "Missing the required parameter 'amazon_order_id' when calling MessagingApi.create_confirm_delivery_details" if amazon_order_id.nil?
      # verify the required parameter 'marketplace_ids' is set
      fail ArgumentError, "Missing the required parameter 'marketplace_ids' when calling MessagingApi.create_confirm_delivery_details" if marketplace_ids.nil?
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling MessagingApi.create_confirm_delivery_details" if body.nil?
      # resource path
      local_var_path = "/messaging/v1/orders/{amazonOrderId}/messages/confirmDeliveryDetails".sub('{format}','json').sub('{' + 'amazonOrderId' + '}', amazon_order_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'marketplaceIds'] = @api_client.build_collection_param(marketplace_ids, :csv)

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/hal+json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreateConfirmDeliveryDetailsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagingApi#create_confirm_delivery_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Sends a message to ask a buyer an order-related question prior to shipping their order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
    # @param amazon_order_id An Amazon order identifier. This specifies the order for which a message is sent.
    # @param marketplace_ids A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [CreateConfirmOrderDetailsResponse]
    def create_confirm_order_details(amazon_order_id, marketplace_ids, body, opts = {})
      data, _status_code, _headers = create_confirm_order_details_with_http_info(amazon_order_id, marketplace_ids, body, opts)
      return data
    end

    # 
    # Sends a message to ask a buyer an order-related question prior to shipping their order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
    # @param amazon_order_id An Amazon order identifier. This specifies the order for which a message is sent.
    # @param marketplace_ids A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateConfirmOrderDetailsResponse, Fixnum, Hash)>] CreateConfirmOrderDetailsResponse data, response status code and response headers
    def create_confirm_order_details_with_http_info(amazon_order_id, marketplace_ids, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MessagingApi.create_confirm_order_details ..."
      end
      # verify the required parameter 'amazon_order_id' is set
      fail ArgumentError, "Missing the required parameter 'amazon_order_id' when calling MessagingApi.create_confirm_order_details" if amazon_order_id.nil?
      # verify the required parameter 'marketplace_ids' is set
      fail ArgumentError, "Missing the required parameter 'marketplace_ids' when calling MessagingApi.create_confirm_order_details" if marketplace_ids.nil?
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling MessagingApi.create_confirm_order_details" if body.nil?
      # resource path
      local_var_path = "/messaging/v1/orders/{amazonOrderId}/messages/confirmOrderDetails".sub('{format}','json').sub('{' + 'amazonOrderId' + '}', amazon_order_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'marketplaceIds'] = @api_client.build_collection_param(marketplace_ids, :csv)

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/hal+json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreateConfirmOrderDetailsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagingApi#create_confirm_order_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Sends a message to contact a Home Service customer to arrange a service call or to gather information prior to a service call.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
    # @param amazon_order_id An Amazon order identifier. This specifies the order for which a message is sent.
    # @param marketplace_ids A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [CreateConfirmServiceDetailsResponse]
    def create_confirm_service_details(amazon_order_id, marketplace_ids, body, opts = {})
      data, _status_code, _headers = create_confirm_service_details_with_http_info(amazon_order_id, marketplace_ids, body, opts)
      return data
    end

    # 
    # Sends a message to contact a Home Service customer to arrange a service call or to gather information prior to a service call.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
    # @param amazon_order_id An Amazon order identifier. This specifies the order for which a message is sent.
    # @param marketplace_ids A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateConfirmServiceDetailsResponse, Fixnum, Hash)>] CreateConfirmServiceDetailsResponse data, response status code and response headers
    def create_confirm_service_details_with_http_info(amazon_order_id, marketplace_ids, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MessagingApi.create_confirm_service_details ..."
      end
      # verify the required parameter 'amazon_order_id' is set
      fail ArgumentError, "Missing the required parameter 'amazon_order_id' when calling MessagingApi.create_confirm_service_details" if amazon_order_id.nil?
      # verify the required parameter 'marketplace_ids' is set
      fail ArgumentError, "Missing the required parameter 'marketplace_ids' when calling MessagingApi.create_confirm_service_details" if marketplace_ids.nil?
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling MessagingApi.create_confirm_service_details" if body.nil?
      # resource path
      local_var_path = "/messaging/v1/orders/{amazonOrderId}/messages/confirmServiceDetails".sub('{format}','json').sub('{' + 'amazonOrderId' + '}', amazon_order_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'marketplaceIds'] = @api_client.build_collection_param(marketplace_ids, :csv)

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/hal+json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreateConfirmServiceDetailsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagingApi#create_confirm_service_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Sends a message to a buyer to share a digital access key needed to utilize digital content in their order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
    # @param amazon_order_id An Amazon order identifier. This specifies the order for which a message is sent.
    # @param marketplace_ids A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [CreateDigitalAccessKeyResponse]
    def create_digital_access_key(amazon_order_id, marketplace_ids, body, opts = {})
      data, _status_code, _headers = create_digital_access_key_with_http_info(amazon_order_id, marketplace_ids, body, opts)
      return data
    end

    # 
    # Sends a message to a buyer to share a digital access key needed to utilize digital content in their order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
    # @param amazon_order_id An Amazon order identifier. This specifies the order for which a message is sent.
    # @param marketplace_ids A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateDigitalAccessKeyResponse, Fixnum, Hash)>] CreateDigitalAccessKeyResponse data, response status code and response headers
    def create_digital_access_key_with_http_info(amazon_order_id, marketplace_ids, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MessagingApi.create_digital_access_key ..."
      end
      # verify the required parameter 'amazon_order_id' is set
      fail ArgumentError, "Missing the required parameter 'amazon_order_id' when calling MessagingApi.create_digital_access_key" if amazon_order_id.nil?
      # verify the required parameter 'marketplace_ids' is set
      fail ArgumentError, "Missing the required parameter 'marketplace_ids' when calling MessagingApi.create_digital_access_key" if marketplace_ids.nil?
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling MessagingApi.create_digital_access_key" if body.nil?
      # resource path
      local_var_path = "/messaging/v1/orders/{amazonOrderId}/messages/digitalAccessKey".sub('{format}','json').sub('{' + 'amazonOrderId' + '}', amazon_order_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'marketplaceIds'] = @api_client.build_collection_param(marketplace_ids, :csv)

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/hal+json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreateDigitalAccessKeyResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagingApi#create_digital_access_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Sends a critical message that contains documents that a seller is legally obligated to provide to the buyer. This message should only be used to deliver documents that are required by law.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
    # @param amazon_order_id An Amazon order identifier. This specifies the order for which a message is sent.
    # @param marketplace_ids A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [CreateLegalDisclosureResponse]
    def create_legal_disclosure(amazon_order_id, marketplace_ids, body, opts = {})
      data, _status_code, _headers = create_legal_disclosure_with_http_info(amazon_order_id, marketplace_ids, body, opts)
      return data
    end

    # 
    # Sends a critical message that contains documents that a seller is legally obligated to provide to the buyer. This message should only be used to deliver documents that are required by law.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
    # @param amazon_order_id An Amazon order identifier. This specifies the order for which a message is sent.
    # @param marketplace_ids A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateLegalDisclosureResponse, Fixnum, Hash)>] CreateLegalDisclosureResponse data, response status code and response headers
    def create_legal_disclosure_with_http_info(amazon_order_id, marketplace_ids, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MessagingApi.create_legal_disclosure ..."
      end
      # verify the required parameter 'amazon_order_id' is set
      fail ArgumentError, "Missing the required parameter 'amazon_order_id' when calling MessagingApi.create_legal_disclosure" if amazon_order_id.nil?
      # verify the required parameter 'marketplace_ids' is set
      fail ArgumentError, "Missing the required parameter 'marketplace_ids' when calling MessagingApi.create_legal_disclosure" if marketplace_ids.nil?
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling MessagingApi.create_legal_disclosure" if body.nil?
      # resource path
      local_var_path = "/messaging/v1/orders/{amazonOrderId}/messages/legalDisclosure".sub('{format}','json').sub('{' + 'amazonOrderId' + '}', amazon_order_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'marketplaceIds'] = @api_client.build_collection_param(marketplace_ids, :csv)

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/hal+json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreateLegalDisclosureResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagingApi#create_legal_disclosure\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Sends a non-critical message that asks a buyer to remove their negative feedback. This message should only be sent after the seller has resolved the buyer's problem.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
    # @param amazon_order_id An Amazon order identifier. This specifies the order for which a message is sent.
    # @param marketplace_ids A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
    # @param [Hash] opts the optional parameters
    # @return [CreateNegativeFeedbackRemovalResponse]
    def create_negative_feedback_removal(amazon_order_id, marketplace_ids, opts = {})
      data, _status_code, _headers = create_negative_feedback_removal_with_http_info(amazon_order_id, marketplace_ids, opts)
      return data
    end

    # 
    # Sends a non-critical message that asks a buyer to remove their negative feedback. This message should only be sent after the seller has resolved the buyer&#39;s problem.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
    # @param amazon_order_id An Amazon order identifier. This specifies the order for which a message is sent.
    # @param marketplace_ids A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateNegativeFeedbackRemovalResponse, Fixnum, Hash)>] CreateNegativeFeedbackRemovalResponse data, response status code and response headers
    def create_negative_feedback_removal_with_http_info(amazon_order_id, marketplace_ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MessagingApi.create_negative_feedback_removal ..."
      end
      # verify the required parameter 'amazon_order_id' is set
      fail ArgumentError, "Missing the required parameter 'amazon_order_id' when calling MessagingApi.create_negative_feedback_removal" if amazon_order_id.nil?
      # verify the required parameter 'marketplace_ids' is set
      fail ArgumentError, "Missing the required parameter 'marketplace_ids' when calling MessagingApi.create_negative_feedback_removal" if marketplace_ids.nil?
      # resource path
      local_var_path = "/messaging/v1/orders/{amazonOrderId}/messages/negativeFeedbackRemoval".sub('{format}','json').sub('{' + 'amazonOrderId' + '}', amazon_order_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'marketplaceIds'] = @api_client.build_collection_param(marketplace_ids, :csv)

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/hal+json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreateNegativeFeedbackRemovalResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagingApi#create_negative_feedback_removal\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Sends a critical message to a buyer that an unexpected problem was encountered affecting the completion of the order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
    # @param amazon_order_id An Amazon order identifier. This specifies the order for which a message is sent.
    # @param marketplace_ids A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [CreateUnexpectedProblemResponse]
    def create_unexpected_problem(amazon_order_id, marketplace_ids, body, opts = {})
      data, _status_code, _headers = create_unexpected_problem_with_http_info(amazon_order_id, marketplace_ids, body, opts)
      return data
    end

    # 
    # Sends a critical message to a buyer that an unexpected problem was encountered affecting the completion of the order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
    # @param amazon_order_id An Amazon order identifier. This specifies the order for which a message is sent.
    # @param marketplace_ids A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateUnexpectedProblemResponse, Fixnum, Hash)>] CreateUnexpectedProblemResponse data, response status code and response headers
    def create_unexpected_problem_with_http_info(amazon_order_id, marketplace_ids, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MessagingApi.create_unexpected_problem ..."
      end
      # verify the required parameter 'amazon_order_id' is set
      fail ArgumentError, "Missing the required parameter 'amazon_order_id' when calling MessagingApi.create_unexpected_problem" if amazon_order_id.nil?
      # verify the required parameter 'marketplace_ids' is set
      fail ArgumentError, "Missing the required parameter 'marketplace_ids' when calling MessagingApi.create_unexpected_problem" if marketplace_ids.nil?
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling MessagingApi.create_unexpected_problem" if body.nil?
      # resource path
      local_var_path = "/messaging/v1/orders/{amazonOrderId}/messages/unexpectedProblem".sub('{format}','json').sub('{' + 'amazonOrderId' + '}', amazon_order_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'marketplaceIds'] = @api_client.build_collection_param(marketplace_ids, :csv)

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/hal+json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreateUnexpectedProblemResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagingApi#create_unexpected_problem\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Sends a message to a buyer to provide details about warranty information on a purchase in their order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
    # @param amazon_order_id An Amazon order identifier. This specifies the order for which a message is sent.
    # @param marketplace_ids A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [CreateWarrantyResponse]
    def create_warranty(amazon_order_id, marketplace_ids, body, opts = {})
      data, _status_code, _headers = create_warranty_with_http_info(amazon_order_id, marketplace_ids, body, opts)
      return data
    end

    # 
    # Sends a message to a buyer to provide details about warranty information on a purchase in their order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
    # @param amazon_order_id An Amazon order identifier. This specifies the order for which a message is sent.
    # @param marketplace_ids A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateWarrantyResponse, Fixnum, Hash)>] CreateWarrantyResponse data, response status code and response headers
    def create_warranty_with_http_info(amazon_order_id, marketplace_ids, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MessagingApi.create_warranty ..."
      end
      # verify the required parameter 'amazon_order_id' is set
      fail ArgumentError, "Missing the required parameter 'amazon_order_id' when calling MessagingApi.create_warranty" if amazon_order_id.nil?
      # verify the required parameter 'marketplace_ids' is set
      fail ArgumentError, "Missing the required parameter 'marketplace_ids' when calling MessagingApi.create_warranty" if marketplace_ids.nil?
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling MessagingApi.create_warranty" if body.nil?
      # resource path
      local_var_path = "/messaging/v1/orders/{amazonOrderId}/messages/warranty".sub('{format}','json').sub('{' + 'amazonOrderId' + '}', amazon_order_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'marketplaceIds'] = @api_client.build_collection_param(marketplace_ids, :csv)

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/hal+json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreateWarrantyResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagingApi#create_warranty\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Returns a response containing attributes related to an order. This includes buyer preferences.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |
    # @param amazon_order_id An Amazon order identifier. This specifies the order for which a message is sent.
    # @param marketplace_ids A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
    # @param [Hash] opts the optional parameters
    # @return [GetAttributesResponse]
    def get_attributes(amazon_order_id, marketplace_ids, opts = {})
      data, _status_code, _headers = get_attributes_with_http_info(amazon_order_id, marketplace_ids, opts)
      return data
    end

    # 
    # Returns a response containing attributes related to an order. This includes buyer preferences.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |
    # @param amazon_order_id An Amazon order identifier. This specifies the order for which a message is sent.
    # @param marketplace_ids A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetAttributesResponse, Fixnum, Hash)>] GetAttributesResponse data, response status code and response headers
    def get_attributes_with_http_info(amazon_order_id, marketplace_ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MessagingApi.get_attributes ..."
      end
      # verify the required parameter 'amazon_order_id' is set
      fail ArgumentError, "Missing the required parameter 'amazon_order_id' when calling MessagingApi.get_attributes" if amazon_order_id.nil?
      # verify the required parameter 'marketplace_ids' is set
      fail ArgumentError, "Missing the required parameter 'marketplace_ids' when calling MessagingApi.get_attributes" if marketplace_ids.nil?
      # resource path
      local_var_path = "/messaging/v1/orders/{amazonOrderId}/attributes".sub('{format}','json').sub('{' + 'amazonOrderId' + '}', amazon_order_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'marketplaceIds'] = @api_client.build_collection_param(marketplace_ids, :csv)

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/hal+json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetAttributesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagingApi#get_attributes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Returns a list of message types that are available for an order that you specify. A message type is represented by an actions object, which contains a path and query parameter(s). You can use the path and parameter(s) to call an operation that sends a message.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
    # @param amazon_order_id An Amazon order identifier. This specifies the order for which you want a list of available message types.
    # @param marketplace_ids A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
    # @param [Hash] opts the optional parameters
    # @return [GetMessagingActionsForOrderResponse]
    def get_messaging_actions_for_order(amazon_order_id, marketplace_ids, opts = {})
      data, _status_code, _headers = get_messaging_actions_for_order_with_http_info(amazon_order_id, marketplace_ids, opts)
      return data
    end

    # 
    # Returns a list of message types that are available for an order that you specify. A message type is represented by an actions object, which contains a path and query parameter(s). You can use the path and parameter(s) to call an operation that sends a message.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
    # @param amazon_order_id An Amazon order identifier. This specifies the order for which you want a list of available message types.
    # @param marketplace_ids A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetMessagingActionsForOrderResponse, Fixnum, Hash)>] GetMessagingActionsForOrderResponse data, response status code and response headers
    def get_messaging_actions_for_order_with_http_info(amazon_order_id, marketplace_ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MessagingApi.get_messaging_actions_for_order ..."
      end
      # verify the required parameter 'amazon_order_id' is set
      fail ArgumentError, "Missing the required parameter 'amazon_order_id' when calling MessagingApi.get_messaging_actions_for_order" if amazon_order_id.nil?
      # verify the required parameter 'marketplace_ids' is set
      fail ArgumentError, "Missing the required parameter 'marketplace_ids' when calling MessagingApi.get_messaging_actions_for_order" if marketplace_ids.nil?
      # resource path
      local_var_path = "/messaging/v1/orders/{amazonOrderId}".sub('{format}','json').sub('{' + 'amazonOrderId' + '}', amazon_order_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'marketplaceIds'] = @api_client.build_collection_param(marketplace_ids, :csv)

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/hal+json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetMessagingActionsForOrderResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagingApi#get_messaging_actions_for_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
