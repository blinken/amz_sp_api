=begin
#Selling Partner API for Services

#With the Services API, you can build applications that help service providers get and modify their service orders.

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.26

=end

require 'date'

module AmzSpApi::ServicesApiModel
  # Information about an item associated with the service job.
  class AssociatedItem
    # The Amazon Standard Identification Number (ASIN) of the item.
    attr_accessor :asin

    # The title of the item.
    attr_accessor :title

    # The total number of items included in the order.
    attr_accessor :quantity

    # The Amazon-defined identifier for an order placed by the buyer, in 3-7-7 format.
    attr_accessor :order_id

    # The status of the item.
    attr_accessor :item_status

    # The brand name of the item.
    attr_accessor :brand_name

    # Delivery information for the item.
    attr_accessor :item_delivery

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'asin' => :'asin',
        :'title' => :'title',
        :'quantity' => :'quantity',
        :'order_id' => :'orderId',
        :'item_status' => :'itemStatus',
        :'brand_name' => :'brandName',
        :'item_delivery' => :'itemDelivery'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'asin' => :'String',
        :'title' => :'String',
        :'quantity' => :'Integer',
        :'order_id' => :'OrderId',
        :'item_status' => :'String',
        :'brand_name' => :'String',
        :'item_delivery' => :'ItemDelivery'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'asin')
        self.asin = attributes[:'asin']
      end

      if attributes.has_key?(:'title')
        self.title = attributes[:'title']
      end

      if attributes.has_key?(:'quantity')
        self.quantity = attributes[:'quantity']
      end

      if attributes.has_key?(:'orderId')
        self.order_id = attributes[:'orderId']
      end

      if attributes.has_key?(:'itemStatus')
        self.item_status = attributes[:'itemStatus']
      end

      if attributes.has_key?(:'brandName')
        self.brand_name = attributes[:'brandName']
      end

      if attributes.has_key?(:'itemDelivery')
        self.item_delivery = attributes[:'itemDelivery']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      item_status_validator = EnumAttributeValidator.new('String', ['ACTIVE', 'CANCELLED', 'SHIPPED', 'DELIVERED'])
      return false unless item_status_validator.valid?(@item_status)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] item_status Object to be assigned
    def item_status=(item_status)
      validator = EnumAttributeValidator.new('String', ['ACTIVE', 'CANCELLED', 'SHIPPED', 'DELIVERED'])
      unless validator.valid?(item_status)
        fail ArgumentError, 'invalid value for "item_status", must be one of #{validator.allowable_values}.'
      end
      @item_status = item_status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          asin == o.asin &&
          title == o.title &&
          quantity == o.quantity &&
          order_id == o.order_id &&
          item_status == o.item_status &&
          brand_name == o.brand_name &&
          item_delivery == o.item_delivery
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [asin, title, quantity, order_id, item_status, brand_name, item_delivery].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = AmzSpApi::ServicesApiModel.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
