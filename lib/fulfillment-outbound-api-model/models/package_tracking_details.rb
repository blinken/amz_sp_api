=begin
#Selling Partner APIs for Fulfillment Outbound

#The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.

OpenAPI spec version: 2020-07-01

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.26

=end

require 'date'

module AmzSpApi::FulfillmentOutboundApiModel
  class PackageTrackingDetails
    # The package identifier.
    attr_accessor :package_number

    # The tracking number for the package.
    attr_accessor :tracking_number

    # Link on swiship.com that allows customers to track the package.
    attr_accessor :customer_tracking_link

    # The name of the carrier.
    attr_accessor :carrier_code

    # The phone number of the carrier.
    attr_accessor :carrier_phone_number

    # The URL of the carrierâ€™s website.
    attr_accessor :carrier_url

    # The shipping date for the package.
    attr_accessor :ship_date

    # The estimated arrival date.
    attr_accessor :estimated_arrival_date

    # The destination city for the package.
    attr_accessor :ship_to_address

    attr_accessor :current_status

    # Description corresponding to the CurrentStatus value.
    attr_accessor :current_status_description

    # The name of the person who signed for the package.
    attr_accessor :signed_for_by

    attr_accessor :additional_location_info

    attr_accessor :tracking_events

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'package_number' => :'packageNumber',
        :'tracking_number' => :'trackingNumber',
        :'customer_tracking_link' => :'customerTrackingLink',
        :'carrier_code' => :'carrierCode',
        :'carrier_phone_number' => :'carrierPhoneNumber',
        :'carrier_url' => :'carrierURL',
        :'ship_date' => :'shipDate',
        :'estimated_arrival_date' => :'estimatedArrivalDate',
        :'ship_to_address' => :'shipToAddress',
        :'current_status' => :'currentStatus',
        :'current_status_description' => :'currentStatusDescription',
        :'signed_for_by' => :'signedForBy',
        :'additional_location_info' => :'additionalLocationInfo',
        :'tracking_events' => :'trackingEvents'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'package_number' => :'Integer',
        :'tracking_number' => :'String',
        :'customer_tracking_link' => :'String',
        :'carrier_code' => :'String',
        :'carrier_phone_number' => :'String',
        :'carrier_url' => :'String',
        :'ship_date' => :'Timestamp',
        :'estimated_arrival_date' => :'Timestamp',
        :'ship_to_address' => :'TrackingAddress',
        :'current_status' => :'CurrentStatus',
        :'current_status_description' => :'String',
        :'signed_for_by' => :'String',
        :'additional_location_info' => :'AdditionalLocationInfo',
        :'tracking_events' => :'TrackingEventList'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'packageNumber')
        self.package_number = attributes[:'packageNumber']
      end

      if attributes.has_key?(:'trackingNumber')
        self.tracking_number = attributes[:'trackingNumber']
      end

      if attributes.has_key?(:'customerTrackingLink')
        self.customer_tracking_link = attributes[:'customerTrackingLink']
      end

      if attributes.has_key?(:'carrierCode')
        self.carrier_code = attributes[:'carrierCode']
      end

      if attributes.has_key?(:'carrierPhoneNumber')
        self.carrier_phone_number = attributes[:'carrierPhoneNumber']
      end

      if attributes.has_key?(:'carrierURL')
        self.carrier_url = attributes[:'carrierURL']
      end

      if attributes.has_key?(:'shipDate')
        self.ship_date = attributes[:'shipDate']
      end

      if attributes.has_key?(:'estimatedArrivalDate')
        self.estimated_arrival_date = attributes[:'estimatedArrivalDate']
      end

      if attributes.has_key?(:'shipToAddress')
        self.ship_to_address = attributes[:'shipToAddress']
      end

      if attributes.has_key?(:'currentStatus')
        self.current_status = attributes[:'currentStatus']
      end

      if attributes.has_key?(:'currentStatusDescription')
        self.current_status_description = attributes[:'currentStatusDescription']
      end

      if attributes.has_key?(:'signedForBy')
        self.signed_for_by = attributes[:'signedForBy']
      end

      if attributes.has_key?(:'additionalLocationInfo')
        self.additional_location_info = attributes[:'additionalLocationInfo']
      end

      if attributes.has_key?(:'trackingEvents')
        self.tracking_events = attributes[:'trackingEvents']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @package_number.nil?
        invalid_properties.push('invalid value for "package_number", package_number cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @package_number.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          package_number == o.package_number &&
          tracking_number == o.tracking_number &&
          customer_tracking_link == o.customer_tracking_link &&
          carrier_code == o.carrier_code &&
          carrier_phone_number == o.carrier_phone_number &&
          carrier_url == o.carrier_url &&
          ship_date == o.ship_date &&
          estimated_arrival_date == o.estimated_arrival_date &&
          ship_to_address == o.ship_to_address &&
          current_status == o.current_status &&
          current_status_description == o.current_status_description &&
          signed_for_by == o.signed_for_by &&
          additional_location_info == o.additional_location_info &&
          tracking_events == o.tracking_events
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [package_number, tracking_number, customer_tracking_link, carrier_code, carrier_phone_number, carrier_url, ship_date, estimated_arrival_date, ship_to_address, current_status, current_status_description, signed_for_by, additional_location_info, tracking_events].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = AmzSpApi::FulfillmentOutboundApiModel.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
