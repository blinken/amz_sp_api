=begin
#Selling Partner API for Listings Items

#The Selling Partner API for Listings Items (Listings Items API) provides programmatic access to selling partner listings on Amazon. Use this API in collaboration with the Selling Partner API for Product Type Definitions, which you use to retrieve the information about Amazon product types needed to use the Listings Items API.  For more information, see the [Listings Items API Use Case Guide](https://github.com/amzn/selling-partner-api-docs/blob/main/guides/en-US/use-case-guides/listings-items-api-use-case-guide/listings-items-api-use-case-guide_2021-08-01.md).

OpenAPI spec version: 2021-08-01

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require 'date'

module AmzSpApi::ListingsItemsApiModel
  # Summary details of a listings item for an Amazon marketplace.
  class ItemSummaryByMarketplace
    # A marketplace identifier. Identifies the Amazon marketplace for the listings item.
    attr_accessor :marketplace_id

    # Amazon Standard Identification Number (ASIN) of the listings item.
    attr_accessor :asin

    # The Amazon product type of the listings item.
    attr_accessor :product_type

    # Identifies the condition of the listings item.
    attr_accessor :condition_type

    # Statuses that apply to the listings item.
    attr_accessor :status

    # Fulfillment network stock keeping unit is an identifier used by Amazon fulfillment centers to identify each unique item.
    attr_accessor :fn_sku

    # Name, or title, associated with an Amazon catalog item.
    attr_accessor :item_name

    # Date the listings item was created, in ISO 8601 format.
    attr_accessor :created_date

    # Date the listings item was last updated, in ISO 8601 format.
    attr_accessor :last_updated_date

    # Main image for the listings item.
    attr_accessor :main_image

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'marketplace_id' => :'marketplaceId',
        :'asin' => :'asin',
        :'product_type' => :'productType',
        :'condition_type' => :'conditionType',
        :'status' => :'status',
        :'fn_sku' => :'fnSku',
        :'item_name' => :'itemName',
        :'created_date' => :'createdDate',
        :'last_updated_date' => :'lastUpdatedDate',
        :'main_image' => :'mainImage'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'marketplace_id' => :'String',
        :'asin' => :'String',
        :'product_type' => :'String',
        :'condition_type' => :'String',
        :'status' => :'Array<String>',
        :'fn_sku' => :'String',
        :'item_name' => :'String',
        :'created_date' => :'DateTime',
        :'last_updated_date' => :'DateTime',
        :'main_image' => :'ItemImage'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'marketplaceId')
        self.marketplace_id = attributes[:'marketplaceId']
      end

      if attributes.has_key?(:'asin')
        self.asin = attributes[:'asin']
      end

      if attributes.has_key?(:'productType')
        self.product_type = attributes[:'productType']
      end

      if attributes.has_key?(:'conditionType')
        self.condition_type = attributes[:'conditionType']
      end

      if attributes.has_key?(:'status')
        if (value = attributes[:'status']).is_a?(Array)
          self.status = value
        end
      end

      if attributes.has_key?(:'fnSku')
        self.fn_sku = attributes[:'fnSku']
      end

      if attributes.has_key?(:'itemName')
        self.item_name = attributes[:'itemName']
      end

      if attributes.has_key?(:'createdDate')
        self.created_date = attributes[:'createdDate']
      end

      if attributes.has_key?(:'lastUpdatedDate')
        self.last_updated_date = attributes[:'lastUpdatedDate']
      end

      if attributes.has_key?(:'mainImage')
        self.main_image = attributes[:'mainImage']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @marketplace_id.nil?
      return false if @asin.nil?
      return false if @product_type.nil?
      condition_type_validator = EnumAttributeValidator.new('String', ["new_new", "new_open_box", "new_oem", "refurbished_refurbished", "used_like_new", "used_very_good", "used_good", "used_acceptable", "collectible_like_new", "collectible_very_good", "collectible_good", "collectible_acceptable", "club_club"])
      return false unless condition_type_validator.valid?(@condition_type)
      return false if @status.nil?
      return false if @item_name.nil?
      return false if @created_date.nil?
      return false if @last_updated_date.nil?
      return true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] condition_type Object to be assigned
    def condition_type=(condition_type)
      validator = EnumAttributeValidator.new('String', ["new_new", "new_open_box", "new_oem", "refurbished_refurbished", "used_like_new", "used_very_good", "used_good", "used_acceptable", "collectible_like_new", "collectible_very_good", "collectible_good", "collectible_acceptable", "club_club"])
      unless validator.valid?(condition_type)
        fail ArgumentError, "invalid value for 'condition_type', must be one of #{validator.allowable_values}."
      end
      @condition_type = condition_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          marketplace_id == o.marketplace_id &&
          asin == o.asin &&
          product_type == o.product_type &&
          condition_type == o.condition_type &&
          status == o.status &&
          fn_sku == o.fn_sku &&
          item_name == o.item_name &&
          created_date == o.created_date &&
          last_updated_date == o.last_updated_date &&
          main_image == o.main_image
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [marketplace_id, asin, product_type, condition_type, status, fn_sku, item_name, created_date, last_updated_date, main_image].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /^(true|t|yes|y|1)$/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = AmzSpApi::ListingsItemsApiModel.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
