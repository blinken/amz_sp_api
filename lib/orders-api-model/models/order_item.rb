=begin
#Selling Partner API for Orders

#The Selling Partner API for Orders helps you programmatically retrieve order information. These APIs let you develop fast, flexible, custom applications in areas like order synchronization, order research, and demand-based decision support tools.

OpenAPI spec version: v0

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require 'date'

module AmzSpApi::OrdersApiModel
  # A single order item.
  class OrderItem
    # The Amazon Standard Identification Number (ASIN) of the item.
    attr_accessor :asin

    # The seller stock keeping unit (SKU) of the item.
    attr_accessor :seller_sku

    # An Amazon-defined order item identifier.
    attr_accessor :order_item_id

    # The name of the item.
    attr_accessor :title

    # The number of items in the order. 
    attr_accessor :quantity_ordered

    # The number of items shipped.
    attr_accessor :quantity_shipped

    # Product information for the item.
    attr_accessor :product_info

    # The number and value of Amazon Points granted with the purchase of an item.
    attr_accessor :points_granted

    # The selling price of the order item. Note that an order item is an item and a quantity. This means that the value of ItemPrice is equal to the selling price of the item multiplied by the quantity ordered. Note that ItemPrice excludes ShippingPrice and GiftWrapPrice.
    attr_accessor :item_price

    # The shipping price of the item.
    attr_accessor :shipping_price

    # The tax on the item price.
    attr_accessor :item_tax

    # The tax on the shipping price.
    attr_accessor :shipping_tax

    # The discount on the shipping price.
    attr_accessor :shipping_discount

    # The tax on the discount on the shipping price.
    attr_accessor :shipping_discount_tax

    # The total of all promotional discounts in the offer.
    attr_accessor :promotion_discount

    # The tax on the total of all promotional discounts in the offer.
    attr_accessor :promotion_discount_tax

    attr_accessor :promotion_ids

    # The fee charged for COD service.
    attr_accessor :cod_fee

    # The discount on the COD fee.
    attr_accessor :cod_fee_discount

    # When true, the item is a gift.
    attr_accessor :is_gift

    # The condition of the item as described by the seller.
    attr_accessor :condition_note

    # The condition of the item.  Possible values: New, Used, Collectible, Refurbished, Preorder, Club.
    attr_accessor :condition_id

    # The subcondition of the item.  Possible values: New, Mint, Very Good, Good, Acceptable, Poor, Club, OEM, Warranty, Refurbished Warranty, Refurbished, Open Box, Any, Other.
    attr_accessor :condition_subtype_id

    # The start date of the scheduled delivery window in the time zone of the order destination. In ISO 8601 date time format.
    attr_accessor :scheduled_delivery_start_date

    # The end date of the scheduled delivery window in the time zone of the order destination. In ISO 8601 date time format.
    attr_accessor :scheduled_delivery_end_date

    # Indicates that the selling price is a special price that is available only for Amazon Business orders. For more information about the Amazon Business Seller Program, see the [Amazon Business website](https://www.amazon.com/b2b/info/amazon-business).   Possible values: BusinessPrice - A special price that is available only for Amazon Business orders.
    attr_accessor :price_designation

    # Information about withheld taxes.
    attr_accessor :tax_collection

    # When true, the product type for this item has a serial number.  Returned only for Amazon Easy Ship orders.
    attr_accessor :serial_number_required

    # When true, transparency codes are required.
    attr_accessor :is_transparency

    # The IOSS number for the marketplace. Sellers shipping to the European Union (EU) from outside of the EU must provide this IOSS number to their carrier when Amazon has collected the VAT on the sale.
    attr_accessor :ioss_number

    # The store chain store identifier. Linked to a specific store in a store chain.
    attr_accessor :store_chain_store_id

    # The category of deemed reseller. This applies to selling partners that are not based in the EU and is used to help them meet the VAT Deemed Reseller tax laws in the EU and UK.
    attr_accessor :deemed_reseller_category

    attr_accessor :buyer_info

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'asin' => :'ASIN',
        :'seller_sku' => :'SellerSKU',
        :'order_item_id' => :'OrderItemId',
        :'title' => :'Title',
        :'quantity_ordered' => :'QuantityOrdered',
        :'quantity_shipped' => :'QuantityShipped',
        :'product_info' => :'ProductInfo',
        :'points_granted' => :'PointsGranted',
        :'item_price' => :'ItemPrice',
        :'shipping_price' => :'ShippingPrice',
        :'item_tax' => :'ItemTax',
        :'shipping_tax' => :'ShippingTax',
        :'shipping_discount' => :'ShippingDiscount',
        :'shipping_discount_tax' => :'ShippingDiscountTax',
        :'promotion_discount' => :'PromotionDiscount',
        :'promotion_discount_tax' => :'PromotionDiscountTax',
        :'promotion_ids' => :'PromotionIds',
        :'cod_fee' => :'CODFee',
        :'cod_fee_discount' => :'CODFeeDiscount',
        :'is_gift' => :'IsGift',
        :'condition_note' => :'ConditionNote',
        :'condition_id' => :'ConditionId',
        :'condition_subtype_id' => :'ConditionSubtypeId',
        :'scheduled_delivery_start_date' => :'ScheduledDeliveryStartDate',
        :'scheduled_delivery_end_date' => :'ScheduledDeliveryEndDate',
        :'price_designation' => :'PriceDesignation',
        :'tax_collection' => :'TaxCollection',
        :'serial_number_required' => :'SerialNumberRequired',
        :'is_transparency' => :'IsTransparency',
        :'ioss_number' => :'IossNumber',
        :'store_chain_store_id' => :'StoreChainStoreId',
        :'deemed_reseller_category' => :'DeemedResellerCategory',
        :'buyer_info' => :'BuyerInfo'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'asin' => :'String',
        :'seller_sku' => :'String',
        :'order_item_id' => :'String',
        :'title' => :'String',
        :'quantity_ordered' => :'Integer',
        :'quantity_shipped' => :'Integer',
        :'product_info' => :'ProductInfoDetail',
        :'points_granted' => :'PointsGrantedDetail',
        :'item_price' => :'Money',
        :'shipping_price' => :'Money',
        :'item_tax' => :'Money',
        :'shipping_tax' => :'Money',
        :'shipping_discount' => :'Money',
        :'shipping_discount_tax' => :'Money',
        :'promotion_discount' => :'Money',
        :'promotion_discount_tax' => :'Money',
        :'promotion_ids' => :'PromotionIdList',
        :'cod_fee' => :'Money',
        :'cod_fee_discount' => :'Money',
        :'is_gift' => :'BOOLEAN',
        :'condition_note' => :'String',
        :'condition_id' => :'String',
        :'condition_subtype_id' => :'String',
        :'scheduled_delivery_start_date' => :'String',
        :'scheduled_delivery_end_date' => :'String',
        :'price_designation' => :'String',
        :'tax_collection' => :'TaxCollection',
        :'serial_number_required' => :'BOOLEAN',
        :'is_transparency' => :'BOOLEAN',
        :'ioss_number' => :'String',
        :'store_chain_store_id' => :'String',
        :'deemed_reseller_category' => :'String',
        :'buyer_info' => :'ItemBuyerInfo'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'ASIN')
        self.asin = attributes[:'ASIN']
      end

      if attributes.has_key?(:'SellerSKU')
        self.seller_sku = attributes[:'SellerSKU']
      end

      if attributes.has_key?(:'OrderItemId')
        self.order_item_id = attributes[:'OrderItemId']
      end

      if attributes.has_key?(:'Title')
        self.title = attributes[:'Title']
      end

      if attributes.has_key?(:'QuantityOrdered')
        self.quantity_ordered = attributes[:'QuantityOrdered']
      end

      if attributes.has_key?(:'QuantityShipped')
        self.quantity_shipped = attributes[:'QuantityShipped']
      end

      if attributes.has_key?(:'ProductInfo')
        self.product_info = attributes[:'ProductInfo']
      end

      if attributes.has_key?(:'PointsGranted')
        self.points_granted = attributes[:'PointsGranted']
      end

      if attributes.has_key?(:'ItemPrice')
        self.item_price = attributes[:'ItemPrice']
      end

      if attributes.has_key?(:'ShippingPrice')
        self.shipping_price = attributes[:'ShippingPrice']
      end

      if attributes.has_key?(:'ItemTax')
        self.item_tax = attributes[:'ItemTax']
      end

      if attributes.has_key?(:'ShippingTax')
        self.shipping_tax = attributes[:'ShippingTax']
      end

      if attributes.has_key?(:'ShippingDiscount')
        self.shipping_discount = attributes[:'ShippingDiscount']
      end

      if attributes.has_key?(:'ShippingDiscountTax')
        self.shipping_discount_tax = attributes[:'ShippingDiscountTax']
      end

      if attributes.has_key?(:'PromotionDiscount')
        self.promotion_discount = attributes[:'PromotionDiscount']
      end

      if attributes.has_key?(:'PromotionDiscountTax')
        self.promotion_discount_tax = attributes[:'PromotionDiscountTax']
      end

      if attributes.has_key?(:'PromotionIds')
        self.promotion_ids = attributes[:'PromotionIds']
      end

      if attributes.has_key?(:'CODFee')
        self.cod_fee = attributes[:'CODFee']
      end

      if attributes.has_key?(:'CODFeeDiscount')
        self.cod_fee_discount = attributes[:'CODFeeDiscount']
      end

      if attributes.has_key?(:'IsGift')
        self.is_gift = attributes[:'IsGift']
      end

      if attributes.has_key?(:'ConditionNote')
        self.condition_note = attributes[:'ConditionNote']
      end

      if attributes.has_key?(:'ConditionId')
        self.condition_id = attributes[:'ConditionId']
      end

      if attributes.has_key?(:'ConditionSubtypeId')
        self.condition_subtype_id = attributes[:'ConditionSubtypeId']
      end

      if attributes.has_key?(:'ScheduledDeliveryStartDate')
        self.scheduled_delivery_start_date = attributes[:'ScheduledDeliveryStartDate']
      end

      if attributes.has_key?(:'ScheduledDeliveryEndDate')
        self.scheduled_delivery_end_date = attributes[:'ScheduledDeliveryEndDate']
      end

      if attributes.has_key?(:'PriceDesignation')
        self.price_designation = attributes[:'PriceDesignation']
      end

      if attributes.has_key?(:'TaxCollection')
        self.tax_collection = attributes[:'TaxCollection']
      end

      if attributes.has_key?(:'SerialNumberRequired')
        self.serial_number_required = attributes[:'SerialNumberRequired']
      end

      if attributes.has_key?(:'IsTransparency')
        self.is_transparency = attributes[:'IsTransparency']
      end

      if attributes.has_key?(:'IossNumber')
        self.ioss_number = attributes[:'IossNumber']
      end

      if attributes.has_key?(:'StoreChainStoreId')
        self.store_chain_store_id = attributes[:'StoreChainStoreId']
      end

      if attributes.has_key?(:'DeemedResellerCategory')
        self.deemed_reseller_category = attributes[:'DeemedResellerCategory']
      end

      if attributes.has_key?(:'BuyerInfo')
        self.buyer_info = attributes[:'BuyerInfo']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @asin.nil?
      return false if @order_item_id.nil?
      return false if @quantity_ordered.nil?
      deemed_reseller_category_validator = EnumAttributeValidator.new('String', ["IOSS", "UOSS"])
      return false unless deemed_reseller_category_validator.valid?(@deemed_reseller_category)
      return true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] deemed_reseller_category Object to be assigned
    def deemed_reseller_category=(deemed_reseller_category)
      validator = EnumAttributeValidator.new('String', ["IOSS", "UOSS"])
      unless validator.valid?(deemed_reseller_category)
        fail ArgumentError, "invalid value for 'deemed_reseller_category', must be one of #{validator.allowable_values}."
      end
      @deemed_reseller_category = deemed_reseller_category
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          asin == o.asin &&
          seller_sku == o.seller_sku &&
          order_item_id == o.order_item_id &&
          title == o.title &&
          quantity_ordered == o.quantity_ordered &&
          quantity_shipped == o.quantity_shipped &&
          product_info == o.product_info &&
          points_granted == o.points_granted &&
          item_price == o.item_price &&
          shipping_price == o.shipping_price &&
          item_tax == o.item_tax &&
          shipping_tax == o.shipping_tax &&
          shipping_discount == o.shipping_discount &&
          shipping_discount_tax == o.shipping_discount_tax &&
          promotion_discount == o.promotion_discount &&
          promotion_discount_tax == o.promotion_discount_tax &&
          promotion_ids == o.promotion_ids &&
          cod_fee == o.cod_fee &&
          cod_fee_discount == o.cod_fee_discount &&
          is_gift == o.is_gift &&
          condition_note == o.condition_note &&
          condition_id == o.condition_id &&
          condition_subtype_id == o.condition_subtype_id &&
          scheduled_delivery_start_date == o.scheduled_delivery_start_date &&
          scheduled_delivery_end_date == o.scheduled_delivery_end_date &&
          price_designation == o.price_designation &&
          tax_collection == o.tax_collection &&
          serial_number_required == o.serial_number_required &&
          is_transparency == o.is_transparency &&
          ioss_number == o.ioss_number &&
          store_chain_store_id == o.store_chain_store_id &&
          deemed_reseller_category == o.deemed_reseller_category &&
          buyer_info == o.buyer_info
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [asin, seller_sku, order_item_id, title, quantity_ordered, quantity_shipped, product_info, points_granted, item_price, shipping_price, item_tax, shipping_tax, shipping_discount, shipping_discount_tax, promotion_discount, promotion_discount_tax, promotion_ids, cod_fee, cod_fee_discount, is_gift, condition_note, condition_id, condition_subtype_id, scheduled_delivery_start_date, scheduled_delivery_end_date, price_designation, tax_collection, serial_number_required, is_transparency, ioss_number, store_chain_store_id, deemed_reseller_category, buyer_info].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /^(true|t|yes|y|1)$/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = AmzSpApi::OrdersApiModel.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
