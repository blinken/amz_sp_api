=begin
#Selling Partner API for Finances

#The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.

OpenAPI spec version: v0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.26

=end

require 'date'

module AmzSpApi::FinancesApiModel
  # Information related to a financial event group.
  class FinancialEventGroup
    # A unique identifier for the financial event group.
    attr_accessor :financial_event_group_id

    # The processing status of the financial event group indicates whether the balance of the financial event group is settled.  Possible values:  * Open  * Closed
    attr_accessor :processing_status

    # The status of the fund transfer.
    attr_accessor :fund_transfer_status

    # The total amount in the currency of the marketplace in which the transactions occurred.
    attr_accessor :original_total

    # The total amount in the currency of the marketplace in which the funds were disbursed.
    attr_accessor :converted_total

    # The date and time when the disbursement or charge was initiated. Only present for closed settlements. In ISO 8601 date time format.
    attr_accessor :fund_transfer_date

    # The trace identifier used by sellers to look up transactions externally.
    attr_accessor :trace_id

    # The account tail of the payment instrument.
    attr_accessor :account_tail

    # The balance at the beginning of the settlement period.
    attr_accessor :beginning_balance

    # The date and time at which the financial event group is opened. In ISO 8601 date time format.
    attr_accessor :financial_event_group_start

    # The date and time at which the financial event group is closed. In ISO 8601 date time format.
    attr_accessor :financial_event_group_end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'financial_event_group_id' => :'FinancialEventGroupId',
        :'processing_status' => :'ProcessingStatus',
        :'fund_transfer_status' => :'FundTransferStatus',
        :'original_total' => :'OriginalTotal',
        :'converted_total' => :'ConvertedTotal',
        :'fund_transfer_date' => :'FundTransferDate',
        :'trace_id' => :'TraceId',
        :'account_tail' => :'AccountTail',
        :'beginning_balance' => :'BeginningBalance',
        :'financial_event_group_start' => :'FinancialEventGroupStart',
        :'financial_event_group_end' => :'FinancialEventGroupEnd'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'financial_event_group_id' => :'String',
        :'processing_status' => :'String',
        :'fund_transfer_status' => :'String',
        :'original_total' => :'Currency',
        :'converted_total' => :'Currency',
        :'fund_transfer_date' => :'Date',
        :'trace_id' => :'String',
        :'account_tail' => :'String',
        :'beginning_balance' => :'Currency',
        :'financial_event_group_start' => :'Date',
        :'financial_event_group_end' => :'Date'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'FinancialEventGroupId')
        self.financial_event_group_id = attributes[:'FinancialEventGroupId']
      end

      if attributes.has_key?(:'ProcessingStatus')
        self.processing_status = attributes[:'ProcessingStatus']
      end

      if attributes.has_key?(:'FundTransferStatus')
        self.fund_transfer_status = attributes[:'FundTransferStatus']
      end

      if attributes.has_key?(:'OriginalTotal')
        self.original_total = attributes[:'OriginalTotal']
      end

      if attributes.has_key?(:'ConvertedTotal')
        self.converted_total = attributes[:'ConvertedTotal']
      end

      if attributes.has_key?(:'FundTransferDate')
        self.fund_transfer_date = attributes[:'FundTransferDate']
      end

      if attributes.has_key?(:'TraceId')
        self.trace_id = attributes[:'TraceId']
      end

      if attributes.has_key?(:'AccountTail')
        self.account_tail = attributes[:'AccountTail']
      end

      if attributes.has_key?(:'BeginningBalance')
        self.beginning_balance = attributes[:'BeginningBalance']
      end

      if attributes.has_key?(:'FinancialEventGroupStart')
        self.financial_event_group_start = attributes[:'FinancialEventGroupStart']
      end

      if attributes.has_key?(:'FinancialEventGroupEnd')
        self.financial_event_group_end = attributes[:'FinancialEventGroupEnd']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          financial_event_group_id == o.financial_event_group_id &&
          processing_status == o.processing_status &&
          fund_transfer_status == o.fund_transfer_status &&
          original_total == o.original_total &&
          converted_total == o.converted_total &&
          fund_transfer_date == o.fund_transfer_date &&
          trace_id == o.trace_id &&
          account_tail == o.account_tail &&
          beginning_balance == o.beginning_balance &&
          financial_event_group_start == o.financial_event_group_start &&
          financial_event_group_end == o.financial_event_group_end
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [financial_event_group_id, processing_status, fund_transfer_status, original_total, converted_total, fund_transfer_date, trace_id, account_tail, beginning_balance, financial_event_group_start, financial_event_group_end].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = AmzSpApi::FinancesApiModel.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
