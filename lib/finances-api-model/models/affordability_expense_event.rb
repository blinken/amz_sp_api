=begin
#Selling Partner API for Finances

#The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.

OpenAPI spec version: v0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.26

=end

require 'date'

module AmzSpApi::FinancesApiModel
  # An expense related to an affordability promotion.
  class AffordabilityExpenseEvent
    # An Amazon-defined identifier for an order.
    attr_accessor :amazon_order_id

    # The date and time when the financial event was created.
    attr_accessor :posted_date

    # An encrypted, Amazon-defined marketplace identifier.
    attr_accessor :marketplace_id

    # Indicates the type of transaction.   Possible values:  * Charge - For an affordability promotion expense.  * Refund - For an affordability promotion expense reversal.
    attr_accessor :transaction_type

    # The amount charged for clicks incurred under the Sponsored Products program.
    attr_accessor :base_expense

    # Central Goods and Service Tax, charged and collected by the central government.
    attr_accessor :tax_type_cgst

    # State Goods and Service Tax, charged and collected by the state government.
    attr_accessor :tax_type_sgst

    # Integrated Goods and Service Tax, charged and collected by the central government.
    attr_accessor :tax_type_igst

    # The total amount charged to the seller. TotalExpense = BaseExpense + TaxTypeIGST + TaxTypeCGST + TaxTypeSGST.
    attr_accessor :total_expense

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'amazon_order_id' => :'AmazonOrderId',
        :'posted_date' => :'PostedDate',
        :'marketplace_id' => :'MarketplaceId',
        :'transaction_type' => :'TransactionType',
        :'base_expense' => :'BaseExpense',
        :'tax_type_cgst' => :'TaxTypeCGST',
        :'tax_type_sgst' => :'TaxTypeSGST',
        :'tax_type_igst' => :'TaxTypeIGST',
        :'total_expense' => :'TotalExpense'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'amazon_order_id' => :'String',
        :'posted_date' => :'Date',
        :'marketplace_id' => :'String',
        :'transaction_type' => :'String',
        :'base_expense' => :'Currency',
        :'tax_type_cgst' => :'Currency',
        :'tax_type_sgst' => :'Currency',
        :'tax_type_igst' => :'Currency',
        :'total_expense' => :'Currency'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'AmazonOrderId')
        self.amazon_order_id = attributes[:'AmazonOrderId']
      end

      if attributes.has_key?(:'PostedDate')
        self.posted_date = attributes[:'PostedDate']
      end

      if attributes.has_key?(:'MarketplaceId')
        self.marketplace_id = attributes[:'MarketplaceId']
      end

      if attributes.has_key?(:'TransactionType')
        self.transaction_type = attributes[:'TransactionType']
      end

      if attributes.has_key?(:'BaseExpense')
        self.base_expense = attributes[:'BaseExpense']
      end

      if attributes.has_key?(:'TaxTypeCGST')
        self.tax_type_cgst = attributes[:'TaxTypeCGST']
      end

      if attributes.has_key?(:'TaxTypeSGST')
        self.tax_type_sgst = attributes[:'TaxTypeSGST']
      end

      if attributes.has_key?(:'TaxTypeIGST')
        self.tax_type_igst = attributes[:'TaxTypeIGST']
      end

      if attributes.has_key?(:'TotalExpense')
        self.total_expense = attributes[:'TotalExpense']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @tax_type_cgst.nil?
        invalid_properties.push('invalid value for "tax_type_cgst", tax_type_cgst cannot be nil.')
      end

      if @tax_type_sgst.nil?
        invalid_properties.push('invalid value for "tax_type_sgst", tax_type_sgst cannot be nil.')
      end

      if @tax_type_igst.nil?
        invalid_properties.push('invalid value for "tax_type_igst", tax_type_igst cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @tax_type_cgst.nil?
      return false if @tax_type_sgst.nil?
      return false if @tax_type_igst.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          amazon_order_id == o.amazon_order_id &&
          posted_date == o.posted_date &&
          marketplace_id == o.marketplace_id &&
          transaction_type == o.transaction_type &&
          base_expense == o.base_expense &&
          tax_type_cgst == o.tax_type_cgst &&
          tax_type_sgst == o.tax_type_sgst &&
          tax_type_igst == o.tax_type_igst &&
          total_expense == o.total_expense
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [amazon_order_id, posted_date, marketplace_id, transaction_type, base_expense, tax_type_cgst, tax_type_sgst, tax_type_igst, total_expense].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = AmzSpApi::FinancesApiModel.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
